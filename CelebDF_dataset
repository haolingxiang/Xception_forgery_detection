import os
import numpy as np
import torch
from torch.utils.data import Dataset, DataLoader
import cv2


class CelebDFDataset(Dataset):

    def __init__(self, root_dir, train_data_path, label_file_path, transform=None):
        self.root_dir = root_dir
        self.transform = transform
        self.videos = os.listdir(os.path.join(root_dir, train_data_path))
        self.label_file_full_path = os.path.join(root_dir, label_file_path)
        self.video_label_map = {}


    def __len__(self):
        return len(os.listdir(self.root_dir))

    def __getitem__(self, idx):

        # class_name = self.classes[idx]
        # class_dir = os.path.join(class_name)
        # video_files = os.listdir(class_dir)

        video_file = np.random.choice(video_files)
        for
        video_path = os.path.join(class_dir, video_file)

        cap = cv2.VideoCapture(video_path)
        frames = []
        while True:
            ret, frame = cap.read()
            if not ret:
                break
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2YCrCb)
            if self.transform:
                frame = self.transform(frame)
            frames.append(frame)
        cap.release()
        label = int(class_name == 'positive')
        return torch.stack(frames), label

    def _build_label_file_map(self):
        with (self.label_file_full_path, 'r') as f:
            label_file_list = f.readlines()
            for label_file in label_file_list:
                label_file = label_file.replace("\n", "")
                label = int(label_file.split("\t")[0])
                file = label_file.split("\t")[1]
                self.video_label_map[file] = label


