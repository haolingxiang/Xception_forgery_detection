import torch
import os
import torch.nn as nn
from torch.utils.data import DataLoader

from XceptionNet import XceptionNet
from celebdf_dataset import CelebDFDataset
# 定义数据预处理
from torchvision import transforms

train_dataset_path = r"D:\trace_prediction\forgery_detection\dataset\train"

transform = transforms.Compose(
    [transforms.Resize(256),
     transforms.CenterCrop(224),
     transforms.ToTensor(),
     transforms.Normalize(mean=[0.485, 0.456, 0.406],
                          std=[0.229, 0.224, 0.225])])

train_dataset = CelebDFDataset(train_dataset_path, transform=transform)
train_loader = DataLoader(train_dataset, batch_size=4, shuffle=True)

def train(model, train_loader, optimizer, criterion, device):
    model.train()
    running_loss = 0.0
    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item() * inputs.size(0)
        epoch_loss = running_loss / len(train_loader.dataset)
        return epoch_loss

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = XceptionNet(3, 2).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)
num_epochs = 10
for epoch in range(num_epochs):
    train_loss = train(model, train_loader, optimizer, criterion, device)
    print(f'Epoch {epoch + 1}/{num_epochs}, Train_Loss:{train_loss:.4f}')
torch.save(model.state_dict(), 'model.pth')


